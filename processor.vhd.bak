library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

entity processor is
port(
	Clk         : in  std_logic;
	Reset       : in  std_logic;
	-- Instruction memory
	I_Addr      : out std_logic_vector(31 downto 0);
	I_RdStb     : out std_logic;
	I_WrStb     : out std_logic;
	I_DataOut   : out std_logic_vector(31 downto 0);
	I_DataIn    : in  std_logic_vector(31 downto 0);
	-- Data memory
	D_Addr      : out std_logic_vector(31 downto 0);
	D_RdStb     : out std_logic;
	D_WrStb     : out std_logic;
	D_DataOut   : out std_logic_vector(31 downto 0);
	D_DataIn    : in  std_logic_vector(31 downto 0));
end processor;

architecture processor_arq of processor is 
-- importamos los componentes
component ALU port ( a : in STD_LOGIC_VECTOR (31 downto 0);
           b : in STD_LOGIC_VECTOR (31 downto 0);
           control : in STD_LOGIC_VECTOR (2 downto 0);
           zero : out STD_LOGIC;
           result : out STD_LOGIC_VECTOR (31 downto 0));
end component;

component mux port(
		a,b:in std_logic_vector(31 downto 0);
		c: in std_logic ;
		s : out std_logic_vector(31 downto 0)
		);
end component;

component sumador port(
		a, b : in std_logic_vector (31 downto 0);
		s : out std_logic_vector (31 downto 0));
end component;

component registro_MEM_WB port(clk, rst, we : in std_logic;
		wb_in : in std_logic_vector (1 downto 0);
		read_data_in : in std_logic_vector (31 downto 0);
		alu_res_in : in std_logic_vector (31 downto 0);
		reg_dest_in : in std_logic_vector (4 downto 0);
		wb_out : out std_logic_vector (1 downto 0);
		read_data_out : out std_logic_vector (31 downto 0);
		alu_res_out : out std_logic_vector (31 downto 0);
		reg_dest_out : out std_logic_vector (4 downto 0));
end component;

component mux_5_1 port(
		a,b:in std_logic_vector(4 downto 0);
		c: in std_logic ;
		s : out std_logic_vector(4 downto 0)
		);
end component;

component registro_ID_EX port(clk, rst, we : in std_logic;
		wb_in : in std_logic_vector (1 downto 0);
		mem_in : in std_logic_vector (2 downto 0);
		ex_in : in std_logic_vector (3 downto 0);
		pc_in : in std_logic_vector (31 downto 0);
		read_data_1_in : in std_logic_vector (31 downto 0);
		read_data_2_in : in std_logic_vector (31 downto 0);
		sign_extend_in : in std_logic_vector (31 downto 0);
		inst_20_16_in : in std_logic_vector (4 downto 0);
		inst_15_11_in : in std_logic_vector (4 downto 0);
		wb_out : out std_logic_vector (1 downto 0);
		mem_out : out std_logic_vector (2 downto 0);
		ex_out : out std_logic_vector (3 downto 0);
		pc_out : out std_logic_vector (31 downto 0);
		read_data_1_out : out std_logic_vector (31 downto 0);
		read_data_2_out : out std_logic_vector (31 downto 0);
		sign_extend_out : out std_logic_vector (31 downto 0);
		inst_20_16_out : out std_logic_vector (4 downto 0);
		inst_15_11_out : out std_logic_vector (4 downto 0));
end component; 
  
component sign_extend port(
		se_in : in std_logic_vector (15 downto 0);
		se_out : out std_logic_vector (31 downto 0));
end component;
 
component unit_control port (
	   wb_out : out std_logic_vector (1 downto 0);
		 mem_out: out std_logic_vector (2 downto 0);
		 ex_out : out std_logic_vector (3 downto 0);
		 ins_in : in std_logic_vector(5 downto 0)
		 );	
end component;

component Registers port ( clk : in STD_LOGIC;
           reset : in STD_LOGIC;
           wr : in STD_LOGIC;
           reg1_dr : in STD_LOGIC_VECTOR (4 downto 0);
           reg2_dr : in STD_LOGIC_VECTOR (4 downto 0);
           reg_wr : in STD_LOGIC_VECTOR (4 downto 0);
           data_wr : in STD_LOGIC_VECTOR (31 downto 0);
           data1_rd : out STD_LOGIC_VECTOR (31 downto 0);
           data2_rd : out STD_LOGIC_VECTOR (31 downto 0));
end component;

component registro_EX_MEM port(clk, rst, we : in std_logic;
		wb_in : in std_logic_vector (1 downto 0);
		mem_in : in std_logic_vector (2 downto 0);
		pc_in : in std_logic_vector (31 downto 0);
		zero_in : in std_logic;
		alu_res_in : in std_logic_vector (31 downto 0);
		write_data_in : in std_logic_vector (31 downto 0);
		reg_dest_in : in std_logic_vector (4 downto 0);
		wb_out : out std_logic_vector (1 downto 0);
		mem_out : out std_logic_vector (2 downto 0);
		pc_out : out std_logic_vector (31 downto 0);		
		zero_out : out std_logic;
		alu_res_out : out std_logic_vector (31 downto 0);
		write_data_out : out std_logic_vector (31 downto 0);
		reg_dest_out : out std_logic_vector (4 downto 0));
end component;

component registro_IF_ID 
  port(
    clk, rst, we : in std_logic;
		pc_in : in std_logic_vector (31 downto 0);
		inst_in : in std_logic_vector (31 downto 0);
    pc_out : out std_logic_vector (31 downto 0);
		inst_out : out std_logic_vector (31 downto 0));
end component;

component registro_PC 
  port(clk, rst, we : in std_logic;
		pc_in : in std_logic_vector (31 downto 0);
    pc_out : out std_logic_vector (31 downto 0));
end component;
  
component alu_control 
port (funct_in : in std_logic_vector (5 downto 0);
			alu_op_in : in std_logic_vector (1 downto 0);
			alu_op_out : out std_logic_vector (2 downto 0)
			);

end component;

component shift_left_2 
  port(
	  sl_in : in std_logic_vector (31 downto 0);
		sl_out : out std_logic_vector (31 downto 0));
end component;

-- ================
-- declaración de señales usadas 
-- se declara todo segun en que etapa tiene out
-- etapa if
signal if_mux_pc_out ,if_mem_ins_out,if_sumador_pc_out : std_logic_vector(31 downto 0);

-- etapa id
signal id_reg_if_id_out , id_read_data_1_out , id_read_data_2_out : std_logic_vector(31 downto 0);
signal id_sign_extend_out: std_logic_vector(31 downto 0);
signal id_control_wb_out: std_logic_vector (1 downto 0);
signal id_control_mem_out:std_logic_vector (2 downto 0);
signal id_control_ex_out : std_logic_vector (3 downto 0);
signal id_reg_if_id_pc_out: std_logic_vector(31 downto 0);

--etapa ex
signal ex_reg_id_ex_wb_out: std_logic_vector (1 downto 0);
signal ex_reg_id_ex_mem_out:std_logic_vector (2 downto 0);
signal ex_reg_id_ex_ex_out : std_logic_vector (3 downto 0);
signal ex_reg_id_ex_pc_out: std_logic_vector(31 downto 0);
signal ex_add_branch_out: std_logic_vector(31 downto 0);--este es el resultado del sumador para el salto
signal ex_read_data_2_out , ex_read_data_2_out: std_logic_vector(31 downto 0);
signal ex_mux_alu_out: std_logic_vector(31 downto 0);
signal ex_alu_zero_out: std_logic;
signal ex_alu_result_out: std_logic_vector(31 downto 0);
signal ex_shift_left_out: std_logic_vector(31 downto 0);
signal ex_sign_extend_out: std_logic_vector(31 downto 0); -- este va al shiftleft y a la alu control
signal ex_alu_control_out: std_logic_vector (2 downto 0); -- salida del alu_control a la alu
signal ex_rt_instruction_out: std_logic_vector (4 downto 0); -- salida del registro_id_ex es instruction[20-16]
signal ex_rd_instruction_out: std_logic_vector (4 downto 0); -- salida del registro_id_ex es instruction[15-11] este es usado para los tipo r
signal ex_mux_rt_rd_out: std_logic_vector (4 downto 0); -- salida del mux entre el rd y el rt 

--etapa mem
signal mem_reg_ex_mem_wb_out: std_logic_vector (1 downto 0);
signal mem_reg_ex_mem_mem_out:std_logic_vector (2 downto 0);
signal mem_branc_out: std_logic;
signal mem_alu_result_out: std_logic_vector(31 downto 0);
signal mem_read_data_2_out: std_logic_vector(31 downto 0);
signal mem_data_memory_read_out: std_logic_vector(31 downto 0); --salida de Data Memory
signal mem_mux_rt_rd_out: std_logic_vector (4 downto 0); -- salida del mux entre el rd y el rt 


--etapa wb
signal wb_reg_mem_wb_wb_out: std_logic_vector (1 downto 0);
signal wb_data_memory_read_out: std_logic_vector(31 downto 0); --salida de Data Memory
signal wb_alu_result_out: std_logic_vector(31 downto 0);
signal wb_mux_data_memoty_alu_result_out: std_logic_vector (31 downto 0); -- salida del mux entre el rd y el rt de aca al write data de registers
signal wb_mux_rt_rd_out: std_logic_vector (4 downto 0); -- salida del mux entre el rd y el rt de aca al write data de registers

-- fin declaracion de señalas por etapas del procesador

begin 	

--instanciacion de los componentes

 
end processor_arq;
